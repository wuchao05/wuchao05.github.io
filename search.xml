<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云ECS安装Mongodb</title>
      <link href="/2023/12/08/Mongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/08/Mongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>操作系统：CentOS  8.5 64位</strong></p><p><strong>自测使用以下两种方式安装了Mongodb，第一种可能因操作差异出现bug，推荐第二种</strong></p><p><a href="https://segmentfault.com/a/1190000040252849"><strong>mongodb重启异常</strong></a></p></blockquote><p><strong>mongodb常用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use test# 创建test数据库/使用test数据库</span><br><span class="line">show users# 查看当前数据库下的所有用户</span><br><span class="line">db.system.users.find()# 查看系统中所有用户</span><br><span class="line">db.createUser(&#123;user:&#x27;root&#x27;, pwd:&#x27;123456&#x27;, roles:[&#123;role:&#x27;root&#x27;, db:&#x27;admin&#x27;&#125;]&#125;);# 创建一个用户，用户名为root，密码为123456，权限是root，所属数据库是admin</span><br><span class="line">db.updateUser(&quot;testUser&quot;,&#123;pwd:&quot;111111&quot;,roles:[&#123;role:&quot;read&quot;,db:&quot;test&quot;&#125;]&#125;)# 修改用户</span><br><span class="line">db.grantRolesToUser(&quot;testRead&quot;,[&#123;role:&quot;readWrite&quot;,db:&quot;test&quot;&#125;])# 追加用户权限</span><br><span class="line">db.dropUser(&quot;testRead&quot;)# 删除用户</span><br></pre></td></tr></table></figure><h3 id="一、yum源下载安装Mongodb"><a href="#一、yum源下载安装Mongodb" class="headerlink" title="一、yum源下载安装Mongodb"></a>一、yum源下载安装Mongodb</h3><p>线上服务器安装<code>Mongodb</code>，从<code>Mongodb</code>官网直接下载链接，也可从阿里云的<code>yum</code>源进行安装，以下使用阿里云<code>yum</code>源安装</p><h4 id="1-在-etc-yum-repos-d-创建一个mongodb-org-repo源文件"><a href="#1-在-etc-yum-repos-d-创建一个mongodb-org-repo源文件" class="headerlink" title="1. 在/etc/yum.repos.d 创建一个mongodb-org.repo源文件"></a>1. 在<code>/etc/yum.repos.d</code> 创建一个<code>mongodb-org.repo</code>源文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mongodb-org.repo</span><br></pre></td></tr></table></figure><p>添加内容如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mngodb-org]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/5.0/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><h4 id="2-更新yum源"><a href="#2-更新yum源" class="headerlink" title="2. 更新yum源"></a>2. 更新<code>yum</code>源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h4 id="3-安装mongodb"><a href="#3-安装mongodb" class="headerlink" title="3. 安装mongodb"></a>3. 安装<code>mongodb</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clean all#清除缓存</span><br><span class="line">yum make cache#构建缓存</span><br><span class="line">yum -y install mongodb-org#安装</span><br></pre></td></tr></table></figure><h4 id="4-修改配置文件-主要是修改Mongodb的日志、数据和进程ID的存放路径"><a href="#4-修改配置文件-主要是修改Mongodb的日志、数据和进程ID的存放路径" class="headerlink" title="4.修改配置文件 - 主要是修改Mongodb的日志、数据和进程ID的存放路径"></a>4.修改配置文件 - 主要是修改<code>Mongodb</code>的日志、数据和进程ID的存放路径</h4><ul><li>创建数据库目录及日志目录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /server/mongo/&#123;data,log,pid&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件路径：&#x2F;etc&#x2F;mongod.conf</li></ul><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220520161558753.png" alt="image-20220520161558753"></p><p>​除了修改配置文件外，还需要修改<code>mongod.service</code>文件内容</p><p>​查找一下<code>mongod.service</code>文件位置，并修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -name mongod.service</span><br><span class="line">vi ./systemd/system/multi-user.target.wants/mongod.service</span><br><span class="line">或者直接 vi /usr/lib/systemd/system/mongod.service</span><br></pre></td></tr></table></figure><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220520162316118.png" alt="image-20220520162316118"></p><p>重新加载服务的配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li><p>启动、停止等操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mongod.service#启动mongodb </span><br><span class="line">systemctl stop mongod.service#停止mongodb</span><br><span class="line">systemctl enable --now mongod.service#开机启动并启用mongodb</span><br><span class="line">systemctl status mongod.service#检查mongodb的服务状态</span><br><span class="line">netstat -anplt|grep mongodx#检查Mongodb端口监听信息</span><br><span class="line">mongod --fork --logpath /server/mongo/log/mongod.log --dbpath /server/mongo/data #启动mongodb指定数据和日志的存储位置</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、官网下载安装Mongodb（推荐）"><a href="#二、官网下载安装Mongodb（推荐）" class="headerlink" title="二、官网下载安装Mongodb（推荐）"></a>二、官网下载安装Mongodb（推荐）</h3><p><strong>下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></strong></p><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220520203403725.png" alt="image-20220520203403725"></p><h4 id="1-在-usr-local-目录中新建mongodb文件夹："><a href="#1-在-usr-local-目录中新建mongodb文件夹：" class="headerlink" title="1. 在/usr/local/目录中新建mongodb文件夹："></a>1. 在<code>/usr/local/</code>目录中新建<code>mongodb</code>文件夹：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/mongodb</span><br><span class="line">cd mongodb</span><br></pre></td></tr></table></figure><h4 id="2-在-usr-local-src目录下载安装并解压"><a href="#2-在-usr-local-src目录下载安装并解压" class="headerlink" title="2. 在/usr/local/src目录下载安装并解压"></a>2. 在<code>/usr/local/src</code>目录下载安装并解压</h4>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-5.0.8.tgz# 下载安装</span><br><span class="line">tar -zxvf mongodb-linux-x86_64-rhel80-5.0.8.tgz /usr/local/mongodb# 解压</span><br><span class="line">mv mongodb-linux-x86_64-rhel80-5.0.8 mongodb# 目录重命名</span><br></pre></td></tr></table></figure><h4 id="3-在usr-local-mongodb目录下，新建存放数据和日志的目录"><a href="#3-在usr-local-mongodb目录下，新建存放数据和日志的目录" class="headerlink" title="3. 在usr/local/mongodb目录下，新建存放数据和日志的目录"></a>3. 在<code>usr/local/mongodb</code>目录下，新建存放数据和日志的目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd mongodb</span><br><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br><span class="line">touch logs/mongodb.log</span><br></pre></td></tr></table></figure><h4 id="4-配置mongodb环境变量"><a href="#4-配置mongodb环境变量" class="headerlink" title="4. 配置mongodb环境变量"></a>4. 配置mongodb环境变量</h4><p>编辑<code>/etc/profile</code>文件，添加以下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> MONGODB_HOME=/usr/local/mongodb/mongodb</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MONGODB_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>编辑完成，执行<code>source /etc/profile</code> 使配置文件生效</p><h4 id="5-新建mongodb配置文件"><a href="#5-新建mongodb配置文件" class="headerlink" title="5. 新建mongodb配置文件"></a><strong>5. 新建mongodb配置文件</strong></h4><p>创建mongodb配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/mongodb.conf</span><br></pre></td></tr></table></figure><p>添加如下配置内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定数据库路径</span></span><br><span class="line">dbpath=/usr/local/mongodb/data</span><br><span class="line"><span class="comment">#指定MongoDB日志文件</span></span><br><span class="line">logpath=/usr/local/mongodb/logs/mongodb.log</span><br><span class="line"><span class="comment"># 使用追加的方式写日志</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"><span class="comment">#端口号</span></span><br><span class="line">port=27017</span><br><span class="line"><span class="comment"># 以守护进程的方式运行MongoDB，创建服务器进程</span></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"><span class="comment">#启用用户验证</span></span><br><span class="line"><span class="comment">#auth=true</span></span><br><span class="line"><span class="comment">#方便外网访问</span></span><br><span class="line"><span class="comment">#绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定则默认本地所有IP</span></span><br><span class="line">bind_ip=0.0.0.0</span><br></pre></td></tr></table></figure><h4 id="6-启动mongodb"><a href="#6-启动mongodb" class="headerlink" title="6. 启动mongodb"></a>6. 启动mongodb</h4><ul><li><p>以配置文件方式启动mongodb</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod -f /etc/mongodb.conf</span><br></pre></td></tr></table></figure></li><li><p>查看mongodb是否成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep mongod</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-关闭mongodb"><a href="#7-关闭mongodb" class="headerlink" title="7. 关闭mongodb"></a>7. 关闭mongodb</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --shutdown -f /etc/mongodb.conf</span><br></pre></td></tr></table></figure><h3 id="三、mongodb管理"><a href="#三、mongodb管理" class="headerlink" title="三、mongodb管理"></a>三、mongodb管理</h3><h4 id="1-创建管理员账号"><a href="#1-创建管理员账号" class="headerlink" title="1. 创建管理员账号"></a>1. 创建管理员账号</h4><ul><li><p><strong>进入mongodb的命令模式</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></li><li><p><strong>切换到admin数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure></li><li><p><strong>创建root用户</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;user:&#x27;root&#x27;, pwd:&#x27;123456&#x27;, roles:[&#123;role:&#x27;root&#x27;, db:&#x27;admin&#x27;&#125;]&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>常用用户权限如下表</strong></p><table><thead><tr><th>权限名</th><th>权限描述</th></tr></thead><tbody><tr><td>Read</td><td>允许用户读取指定数据库</td></tr><tr><td>readWrite</td><td>允许用户读写指定数据库</td></tr><tr><td>backup,retore</td><td>在进行备份、恢复时可以单独指定的角色，在db.createUser()方法中roles里面的db必须写成是admin库，要不然会报错</td></tr><tr><td>dbAdmin</td><td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td></tr><tr><td>userAdmin</td><td>允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</td></tr><tr><td>clusterAdmin</td><td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td></tr><tr><td>readAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的读权限</td></tr><tr><td>readWriteAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td></tr><tr><td>userAdminAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td></tr><tr><td>dbAdminAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td></tr><tr><td>root</td><td>只在admin数据库中可用。超级账号，超级权限</td></tr></tbody></table></li></ul><h4 id="2-开启数据库授权验证"><a href="#2-开启数据库授权验证" class="headerlink" title="2. 开启数据库授权验证"></a>2. 开启数据库授权验证</h4><ul><li><p><strong>关闭数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --shutdown -f /etc/mongodb.conf</span><br></pre></td></tr></table></figure></li><li><p><strong>修改配置文件，去掉auto&#x3D;ture前面的#号</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/mongodb.conf</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220520205228242.png" alt="image-20220520205228242"></p><ul><li><p><strong>重新启动数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod -f /etc/mongodb.conf</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、错误记录"><a href="#四、错误记录" class="headerlink" title="四、错误记录"></a>四、错误记录</h3><h4 id="1-报错码：14"><a href="#1-报错码：14" class="headerlink" title="1. 报错码：14"></a>1. 报错码：14</h4><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220520213110029.png" alt="image-20220520213110029"></p><p><strong>原因</strong></p><p>没有正常关闭mongodb</p><p><strong>解决方案</strong></p><ol><li><p>查看mongo进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep mongo</span><br></pre></td></tr></table></figure></li><li><p>杀死进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -2 20981</span><br></pre></td></tr></table></figure></li><li><p>找到dbpath里边的mongod.lock文件，并删除mongod.lock,删掉原来logs目录里的所有文件</p></li><li><p>以修复方式启动mongodb</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod -f /etc/mongodb.conf --repair</span><br></pre></td></tr></table></figure></li><li><p>再重新启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod -f /etc/mongodb.conf</span><br></pre></td></tr></table></figure></li><li><p>查看进程是否进行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep mongo</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS安装Nginx</title>
      <link href="/2023/12/08/Nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/08/Nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>操作系统：CentOS  8.5 64位</strong></p><p><strong>nginx版本：1.20.2</strong></p></blockquote><h2 id="一、nginx安装与配置"><a href="#一、nginx安装与配置" class="headerlink" title="一、nginx安装与配置"></a>一、nginx安装与配置</h2><p> <strong>nginx常用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 普通命令</span><br><span class="line">cd /usr/local/nginx/sbin/  # 进到nginx目录</span><br><span class="line">./nginx # 启动nginx</span><br><span class="line">./nginx -s stop  # 强制停止</span><br><span class="line">./nginx -s quit  # 平滑停止</span><br><span class="line">./nginx -s reload  # 重载配置文年</span><br><span class="line">nginx -t # 检查配置文件是否正确</span><br><span class="line">nginx -t -c /特定目录/nginx.conf # 检查特定目录的配置文件是否正确</span><br><span class="line">nginx -v # 查看版本信息</span><br><span class="line"></span><br><span class="line"># 系统命令</span><br><span class="line">systemctl start nginx.service# 启动nginx服务</span><br><span class="line">systemctl stop nginx.service# 停止nginx服务</span><br><span class="line">systemctl enable nginx.service# 设置开机自启动</span><br><span class="line">systemctl disable nginx.service# 停止开机自启动</span><br><span class="line">systemctl status nginx.service# 查看服务当前状态</span><br><span class="line">systemctl restart nginx.service# 重新启动服务</span><br><span class="line">systemctl list-units --type=service# 查看所有已启动的服务</span><br></pre></td></tr></table></figure><h3 id="1-安装依赖文件"><a href="#1-安装依赖文件" class="headerlink" title="1. 安装依赖文件"></a>1. 安装依赖文件</h3><p><code>nginx</code>依赖包 - 安装<code>nginx</code>前必须先安装这些依赖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc、libtool</span><br><span class="line">pcre、pcre-devel</span><br><span class="line">zlib、zlib-devel</span><br><span class="line">openssl、openssl-devel</span><br></pre></td></tr></table></figure><ul><li><p>安装<code>gcc</code></p><p>gcc是linux下的编译器，它可以编译 C、C++、Ada、Object C、Java等语言。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ libtool</span><br></pre></td></tr></table></figure><p>查看 gcc版本： gcc -v 或 gcc –version</p></li><li><p>安装<code>pcre</code></p><p>pcre是一个perl库，包括perl兼容的正则表达式库，nginx的http模块使用pcre来解析正则表达式，所以需要安装pcre库。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>查看pcre版本号：pcre-config –version</p></li><li><p>安装<code>zlib</code></p><p>zlib库提供了很多种压缩和解压缩方式，nginx使用zlib对http包的内容进行gzip。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure></li><li><p>安装<code>openssl</code></p><p>openssl用来对http通讯进行加密。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><ul><li><p>下载<code>nginx</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压到 <code>/usr/local/nginx </code>目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/nginx</span><br><span class="line">tar -zxvf  nginx-1.20.2.tar.gz -C /usr/local/nginx</span><br></pre></td></tr></table></figure></li><li><p>安装<code>nginx</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/nginx-1.20.2</span><br><span class="line">./configure  #如果将nginx安装到指定目录，加个参数，./configure --prefix=/usr/local/你指定的目录</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ul><p>​安装完成后，会将<code>nginx</code>的配置文件、<code>sbin</code>目录等放到 <code>/usr/local/nginx</code>目录中，而<code>/usr/local/nginx/nginx-1.20.2</code> 目录只是源码而已。</p><h3 id="3-启动nginx"><a href="#3-启动nginx" class="headerlink" title="3. 启动nginx"></a>3. 启动nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>查看nginx进程信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>查看防火墙是否有开放80端口及http：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure><p>如果防火墙没有开启，先开启防火墙。</p><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220519220305582.png" alt="image-20220519220305582"></p><p> 如果没有开放，必须先开放80端口及http之后，外网才能访问到nginx。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=http --permanent</span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220519220452571.png" alt="image-20220519220452571"></p><p>验证nginx是否启动成功</p><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220519223800775-20220522230349457.png" alt="image-20220519223800775"></p><p><strong>防火墙常用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld  #查看防火墙状态</span><br><span class="line">systemctl start firewalld  #开启防火墙</span><br><span class="line">systemctl stop firewalld  #关闭防火墙</span><br></pre></td></tr></table></figure><h3 id="4-开机自启nginx"><a href="#4-开机自启nginx" class="headerlink" title="4. 开机自启nginx"></a>4. 开机自启nginx</h3><p>在系统服务目录里创建nginx.service文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure><p>nginx.service文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"># 描述服务</span><br><span class="line">Description=nginx</span><br><span class="line"># 描述服务类别</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line"># 服务运行参数的设置，注意【Service】的启动、重启、停止命令都要用绝对路径</span><br><span class="line">[Service]</span><br><span class="line"># 后台运行的形式</span><br><span class="line">Type=forking</span><br><span class="line"># 服务具体运行的命令</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line"># 重启命令</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"># 停止命令</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line"># 表示给服务分配独立的临时空间</span><br><span class="line">PrivateTmp=true</span><br><span class="line"> </span><br><span class="line"># 运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>设置开机启动：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><h3 id="5-nginx文件配置与说明"><a href="#5-nginx文件配置与说明" class="headerlink" title="5. nginx文件配置与说明"></a>5. nginx文件配置与说明</h3><ul><li><p><strong><code>usr/local/nginx</code>目录下的<code>conf/nginx.conf</code>文件是<code>nginx</code>的配置文件。</strong></p></li><li><p><strong><code>usr/local/nginx</code>目录下的<code>sbin/nginx.exe</code>可执行文件用于启动或重启<code>nginx</code>服务</strong></p></li><li><p><strong>将<code>nginx</code>执行脚本配置为全局环境变量</strong></p><ul><li><p>使用<code>vim</code>打开<code>/etc/profile</code>环境变量配置文件</p></li><li><p>添加如下配置内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NGINX_HOME=/usr/local/nginx</span><br><span class="line">export PATH=$PATH:$NGINX_HOME/sbin</span><br></pre></td></tr></table></figure></li><li><p>执行<code>source /etc/profile</code> 使配置文件生效</p></li></ul></li></ul><figure class="highlight plaintext"><figcaption><span>nobody;</span></figcaption><table><tr><td class="code"><pre><span class="line"># nginx.conf</span><br><span class="line">worker_processes  1;  #工作进程：数目。根据硬件调整，通常等于cpu数量最佳</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;  #nginx进程pid存放路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; #工作进程的最大连接数量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">#web服务器配置</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80; #配置监听端口号</span><br><span class="line">        server_name  localhost; #配置访问域名，域名可以有多个，用空格隔开</span><br><span class="line"></span><br><span class="line">        #charset koi8-r; #字符集设置</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; #根目录，这里是相对路径，也可以用绝对路径 E:/wwwroot/html;</span><br><span class="line">            #  适配vue, angular, react的history路由模式，防止刷新页面出现404</span><br><span class="line">            try_files $uri/ index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        # vue-router配置，防止出现404</span><br><span class="line">        location @router &#123;</span><br><span class="line">          rewrite ^.*$ index.html last;</span><br><span class="line">        &#125; </span><br><span class="line">        # 路径匹配到/api，将请求转发到后端服务器3000端口</span><br><span class="line">        location ~/api/ &#123;</span><br><span class="line">           proxy_pass http://0.0.0.0:3000;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#反向代理服务器配置</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80</span><br><span class="line">        server_name  api.loveu.com;  #域名</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8001;</span><br><span class="line">            proxy_set_header    Host                $http_host;</span><br><span class="line">            proxy_set_header    X-Real-IP           $remote_addr;</span><br><span class="line">            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header    X-NginX-Proxy       true;</span><br><span class="line">        &#125;</span><br><span class="line">       location /order &#123; #根据路径转发到不同域名</span><br><span class="line">            proxy_pass http://127.0.0.1:8002; </span><br><span class="line">            proxy_set_header    Host                $http_host;</span><br><span class="line">            proxy_set_header    X-Real-IP           $remote_addr;</span><br><span class="line">            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header    X-NginX-Proxy       true;</span><br><span class="line">        &#125;</span><br><span class="line">       location /pay &#123;  #根据路径转发到不同域名</span><br><span class="line">            proxy_pass http://127.0.0.1:8003</span><br><span class="line">            proxy_set_header    Host                $http_host;</span><br><span class="line">            proxy_set_header    X-Real-IP           $remote_addr;</span><br><span class="line">            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header    X-NginX-Proxy       true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#反向代理 + 负载均衡配置</span><br><span class="line"></span><br><span class="line">   #负载均衡节点配置</span><br><span class="line">    upstream mall-loveu &#123;</span><br><span class="line">        server 127.0.0.1:8031 weight=1;</span><br><span class="line">        server 127.0.0.1:8032 weight=1;</span><br><span class="line">        server 127.0.0.1:8033 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #负载均衡服务器入口</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8030;</span><br><span class="line">        server_name  127.0.0.1;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://mall-loveu;</span><br><span class="line">            proxy_set_header    Host                $http_host;</span><br><span class="line">            proxy_set_header    X-Real-IP           $remote_addr;</span><br><span class="line">            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header    X-NginX-Proxy       true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#https配置</span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl; #监听https端口</span><br><span class="line">    #    server_name  localhost; #配置访问域名，域名可以有多个，用空格隔开</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem; #证书位置</span><br><span class="line">    #    ssl_certificate_key  cert.key; #私钥位置</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;  #密码加密方式</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        try_files $uri $uri/ index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-location-指令说明"><a href="#6-location-指令说明" class="headerlink" title="6. location 指令说明"></a>6. <strong>location 指令说明</strong></h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~] uri &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~ 符号读作破折号。</p><p>&#x3D;：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理请求。<br><del>：用于表示 uri 包含正则表达式，并且区分大小写。<br>~*：用于表示 uri 包含正则表达式，并且不区分大小写。<br>^</del>：用于不含正则表达式的 uri 前，要求nginx服务器找到识别 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS部署前后端项目</title>
      <link href="/2023/12/08/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/08/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>默认已经在linux上安装了nginx，node，mongodb，git</p><p>默认已经在阿里云ecs上开启了前后端项目运行的端口</p></blockquote><h3 id="一、linux远程连接git仓库"><a href="#一、linux远程连接git仓库" class="headerlink" title="一、linux远程连接git仓库"></a>一、linux远程连接git仓库</h3><h4 id="1-生成ssh-key"><a href="#1-生成ssh-key" class="headerlink" title="1. 生成ssh-key"></a>1. 生成ssh-key</h4><ul><li><p>首先进入到<code>/root</code>目录，查看是否已经存在<code>ssh-key</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">ls -la ~/.ssh</span><br></pre></td></tr></table></figure><p>如果没有就新建，如果有，建议删除再新建</p></li><li><p>新生成ssh-key</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;h18321216909@163.com&#x27;</span><br></pre></td></tr></table></figure><p>键入命令后，会让你输入密码用来保护你的密钥等，总共三次需要输入的，都直接三次回车就好！！</p></li><li><p>生成后，会在<code>/root</code>目录下，也就是当前用户的目录下，生成一个<code>.ssh</code>隐藏目录，目录中会有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，一个是私钥，一个是公钥。现在就可以复制使用了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-配置公钥"><a href="#2-配置公钥" class="headerlink" title="2. 配置公钥"></a>2. 配置公钥</h4><p>​将本地生成的公钥复制下来，配置到<code>github</code>或者<code>gitee</code>等远程仓库上，拉取远程代码时会自动使用私钥去解密公钥，解密成功即可完成认证</p><h3 id="二、前端项目部署"><a href="#二、前端项目部署" class="headerlink" title="二、前端项目部署"></a>二、前端项目部署</h3><h4 id="1-拉取项目代码"><a href="#1-拉取项目代码" class="headerlink" title="1. 拉取项目代码"></a>1. 拉取项目代码</h4><p>进入到<code>/usr/local/nginx/html</code>目录下，拉取远程仓库代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/html</span><br><span class="line">git clone git@gitee.com:chaofrank/jianshu-admin.git</span><br></pre></td></tr></table></figure><h4 id="2-安装依赖，项目打包"><a href="#2-安装依赖，项目打包" class="headerlink" title="2. 安装依赖，项目打包"></a>2. 安装依赖，项目打包</h4><p>进入到项目目录，安装项目依赖，打包项目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd jianshu-admin</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="3-nginx配置"><a href="#3-nginx配置" class="headerlink" title="3. nginx配置"></a>3. nginx配置</h4><p>配置nginx，编辑<code>nginx.conf</code>文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220522015053415.png" alt="image-20220522015053415"></p><p>配置好后保存文件，重启nginx生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t # 检查配置文件是否有语法错误</span><br><span class="line">nginx -s reload# 平滑重启nginx</span><br></pre></td></tr></table></figure><h3 id="不用shell操作了，手累。。。用宝塔去了，还是可视化操作比较适合我！！！"><a href="#不用shell操作了，手累。。。用宝塔去了，还是可视化操作比较适合我！！！" class="headerlink" title="不用shell操作了，手累。。。用宝塔去了，还是可视化操作比较适合我！！！"></a>不用shell操作了，手累。。。用宝塔去了，还是可视化操作比较适合我！！！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS安装Node</title>
      <link href="/2023/12/08/Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/12/08/Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>操作系统：CentOS  8.5 64位</strong></p></blockquote><h3 id="一、使用nvm安装多版本Nodejs"><a href="#一、使用nvm安装多版本Nodejs" class="headerlink" title="一、使用nvm安装多版本Nodejs"></a>一、使用nvm安装多版本Nodejs</h3><h4 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h4 id="2-下载NVM源码并检查最新版本"><a href="#2-下载NVM源码并检查最新版本" class="headerlink" title="2. 下载NVM源码并检查最新版本"></a>2. 下载NVM源码并检查最新版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/cnpm/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`</span><br></pre></td></tr></table></figure><h4 id="3-配置-NVM-环境变量"><a href="#3-配置-NVM-环境变量" class="headerlink" title="3. 配置 NVM 环境变量"></a>3. 配置 NVM 环境变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;. ~/.nvm/nvm.sh&quot; &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><ol><li>执行命令使配置文件生效</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="2"><li>查看 Node.js 所有版本</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list-remote</span><br></pre></td></tr></table></figure><ol start="3"><li>安装多个版本的 Node.js</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 12.16.1</span><br><span class="line">nvm install 16.15.0</span><br></pre></td></tr></table></figure><ol start="4"><li>查看已安装的node版本</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><ol start="5"><li>切换node版本</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use v16.15.0</span><br></pre></td></tr></table></figure><h4 id="4-创建Node-js项目"><a href="#4-创建Node-js项目" class="headerlink" title="4. 创建Node.js项目"></a>4. 创建Node.js项目</h4><ol><li>在根目录创建项目文件 <code>index.js</code></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vi index.js</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑index.js文件内容，保存文件</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const hostname = &#x27;0.0.0.0&#x27;;</span><br><span class="line">const port = 8000;</span><br><span class="line">const server = http.createServer((req, res) =&gt; &#123; </span><br><span class="line">    res.statusCode = 200;</span><br><span class="line">    res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;);</span><br><span class="line">    res.end(&#x27;Hello World\n&#x27;);</span><br><span class="line">&#125;); </span><br><span class="line">server.listen(port, hostname, () =&gt; &#123; </span><br><span class="line">    console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>运行node项目</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><ol start="4"><li>在本地浏览器中访问以下地址，查看项目是否正常运行</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://云服务器实例的公网 IP:已配置的端口号</span><br></pre></td></tr></table></figure><p>显示结果如下，则说明Node.js环境搭建成功</p><p><img src="https://blog-post.oss-cn-shanghai.aliyuncs.com/pic_bed/image-20220520151422515.png" alt="image-20220520151422515"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
